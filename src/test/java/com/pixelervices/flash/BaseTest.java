package com.pixelervices.flash;

import com.pixelervices.flash.handlers.FileHandler;
import com.pixelervices.flash.handlers.ReqBodyTestHandler;
import com.pixelervices.flash.handlers.ReqParamTestHandler;
import com.pixelervices.flash.handlers.TestHandler;
import com.pixelservices.flash.components.FlashServer;
import com.pixelservices.flash.components.websocket.WebSocketHandler;
import com.pixelservices.flash.components.websocket.WebSocketSession;
import com.pixelservices.flash.swagger.OpenAPIConfiguration;
import com.pixelservices.flash.swagger.OpenAPIUITemplate;
import org.junit.BeforeClass;

import java.util.List;

public abstract class BaseTest {
    protected static FlashServer server;

    @BeforeClass
    public static void setUp() {
        if (server == null) {
            server = new FlashServer(8080);
            server.route("/test")
                    .register(TestHandler.class)
                    .register(FileHandler.class)
                    .register(ReqParamTestHandler.class)
                    .register(ReqBodyTestHandler.class);

            server.openapi("/docs", new OpenAPIConfiguration(
                    "Flash Server",
                    "Generated by Flash!",
                    "1.0",
                    List.of("http://localhost:" + 8080)
            ), OpenAPIUITemplate.SWAGGER_UI);

            server.get("/test/param/:name", (req, res) -> "Hello, " + req.getRouteParam("name"));

            server.ws("/ws", new WebSocketHandler() {
                @Override
                public void onOpen(WebSocketSession session) {
                    // WebSocket connection opened
                }

                @Override
                public void onClose(WebSocketSession session, int statusCode, String reason) {
                    // WebSocket connection closed
                }

                @Override
                public void onMessage(WebSocketSession session, String message) {
                    System.out.println("Received string message: " + message);
                    String reversedMessage = new StringBuilder(message).reverse().toString();
                    session.sendMessage(reversedMessage);
                }

                @Override
                public void onMessage(WebSocketSession session, byte[] message) {
                    System.out.println("Received binary message: " + message.length + " bytes");
                    byte[] reversedMessage = new byte[message.length];
                    for (int i = 0; i < message.length; i++) {
                        reversedMessage[i] = message[message.length - 1 - i];
                    }
                    session.sendBinaryMessage(reversedMessage);
                }

                @Override
                public void onError(WebSocketSession session, Throwable error) {
                    // Handle WebSocket error
                }
            });

            Thread serverThread = new Thread(() -> {
                try {
                    server.start();
                } catch (Exception e) {
                    throw new RuntimeException("Server failed to start: " + e.getMessage());
                }
            });

            serverThread.start();
        }
    }
}