package com.pixelervices.flash;

import com.pixelervices.flash.handlers.FileHandler;
import com.pixelervices.flash.handlers.ReqBodyTestHandler;
import com.pixelervices.flash.handlers.ReqParamTestHandler;
import com.pixelervices.flash.handlers.TestHandler;
import com.pixelervices.flash.utils.FileUploader;
import com.pixelervices.flash.utils.RequestPerformer;
import com.pixelservices.flash.components.FlashServer;
import com.pixelservices.flash.swagger.OpenAPIConfiguration;
import com.pixelservices.flash.swagger.OpenAPIUITemplate;
import com.pixelservices.logger.Logger;
import com.pixelservices.logger.LoggerFactory;
import org.junit.Test;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;

import static org.junit.Assert.*;

public class TestServer {
    private final Logger logger = LoggerFactory.getLogger("TestLogger");

    @Test
    public void createTestServer(){
        FlashServer server = new FlashServer(8080);

        server.route("/test")
                .register(TestHandler.class)
                .register(FileHandler.class)
                .register(ReqParamTestHandler.class)
                .register(ReqBodyTestHandler.class);

        server.openapi("/docs", new OpenAPIConfiguration(
                "Flash Server",
                "Generated by Flash!",
                "1.0",
                List.of("http://localhost:" + 8080)
        ), OpenAPIUITemplate.SWAGGER_UI);


        server.get("/test/param/:name", (req, res) -> "Hello, " + req.getRouteParam("name"));

        Thread serverThread = new Thread(() -> {
            try {
                server.start();
            } catch (Exception e) {
                fail("Server failed to start: " + e.getMessage());
            }
        });

        serverThread.start();

        CountDownLatch latch = new CountDownLatch(1);

        try {
            if (!latch.await(2, java.util.concurrent.TimeUnit.SECONDS)) {
                assertTrue(true);
            }
        } catch (InterruptedException e) {
            fail("Server start was interrupted: " + e.getMessage());
        }
    }

    @Test
    public void testDefaultHandlers(){
        testEndpoint("/param/John", "Hello, John");
        testEndpoint("/helloworld", "Hello, World!");
    }

    @Test
    public void testFileHandler(){
        try {
            File testFile = createInMemoryFile("This is a test file");
            String response = FileUploader.uploadFile("http://localhost:8080/test/file", testFile);
            logger.info("Response: " + response);
            assertEquals("This is a test file", response);
        } catch (Exception e) {
            fail("Failed to send file: " + e.getMessage());
        }
    }

    @Test
    public void testReqParamHandler(){
        testEndpoint("/reqparam?testParam=John", "Test param: John");
    }

    @Test
    public void testReqBodyTestHandler(){
        String response = RequestPerformer.performPostRequestBodyField("http://localhost:8080/test/reqbody", "testParam", "John");
        assertEquals("Test body: John", response);
    }

    private File createInMemoryFile(String content) {
        try {
            File file = File.createTempFile("test", ".txt");
            file.deleteOnExit();
            FileWriter writer = new FileWriter(file);
            writer.write(content);
            writer.close();
            return file;
        } catch (IOException e) {
            throw new RuntimeException("Failed to create in-memory file", e);
        }
    }

    private void testEndpoint(String endpoint, String expectedResponse) {
        String response = sendGetRequest("http://localhost:8080/test" + endpoint);
        logger.info("Response: " + response);
        assertEquals(expectedResponse, response);
    }

    private String sendGetRequest(String urlString) {
        String response = null;
        try {
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            Scanner scanner = new Scanner(conn.getInputStream());
            response = scanner.useDelimiter("\\A").next();
            scanner.close();
        } catch (Exception ignore) {}
        return response;
    }
}
